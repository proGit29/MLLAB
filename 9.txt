import numpy as np
import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import dendrogram,linkage 
from sklearn.datasets import load_iris

data = load_iris().data
data = data[:6]
def proximity_matrix(data):
    n = data.shape[0]
    pm = np.zeros((n,n))
    for i in range(n):
        for j in range(i+1,n):
            pm[i,j]=pm[j,i]=np.linalg.norm(data[i]-data[j])
    return pm
def plot_deno(data,method):
    link_mat = linkage(data,method=method)
    dendrogram(link_mat)
    plt.title(method.capitalize()+" Linkage")
    plt.show()
print('Proximity Matrix is : ')
print(proximity_matrix(data))


plot_deno(data,'single')
plot_deno(data,'complete')

//
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris

# Load the Iris dataset
data = load_iris().data
data = data[:6]

# Function to calculate the proximity matrix
def proximity_matrix(data):
    n = data.shape[0]
    pm = np.zeros((n, n))
    for i in range(n):
        for j in range(i + 1, n):
            pm[i, j] = pm[j, i] = np.linalg.norm(data[i] - data[j])
    return pm

# Function to perform hierarchical clustering
def hierarchical_clustering(data, method='single'):
    n = data.shape[0]
    clusters = [[i] for i in range(n)]
    distances = proximity_matrix(data)
    
    def find_clusters():
        min_dist = np.inf
        pair = (-1, -1)
        for i in range(len(clusters)):
            for j in range(i + 1, len(clusters)):
                if method == 'single':
                    dist = np.min([distances[p1, p2] for p1 in clusters[i] for p2 in clusters[j]])
                elif method == 'complete':
                    dist = np.max([distances[p1, p2] for p1 in clusters[i] for p2 in clusters[j]])
                if dist < min_dist:
                    min_dist = dist
                    pair = (i, j)
        return pair, min_dist
    
    link_mat = []
    for _ in range(n - 1):
        (i, j), dist = find_clusters()
        link_mat.append([clusters[i][0], clusters[j][0], dist, len(clusters[i]) + len(clusters[j])])
        clusters[i].extend(clusters[j])
        del clusters[j]
    return np.array(link_mat)

# Function to plot dendrogram
def plot_deno(data, method):
    link_mat = hierarchical_clustering(data, method=method)
    plt.figure()
    dendrogram(link_mat)
    plt.title(method.capitalize() + " Linkage")
    plt.show()

# Print the proximity matrix
print('Proximity Matrix is : ')
print(proximity_matrix(data))

# Plot dendrograms
plot_deno(data, 'single')
plot_deno(data, 'complete')
