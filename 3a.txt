
def best_first_search(graph,start,goal,heuristic, path=[]):
    open_list = [(0,start)]
    closed_list = set()
    closed_list.add(start)

    while open_list:
        open_list.sort(key = lambda x: heuristic[x[1]], reverse=True)
        cost, node = open_list.pop()
        path.append(node)

        if node==goal:
            return cost, path

        closed_list.add(node)
        for neighbour, neighbour_cost in graph[node]:
            if neighbour not in closed_list:
                closed_list.add(node)
                open_list.append((cost+neighbour_cost, neighbour))

    return None
graph = {
    'S': [('A', 1), ('B', 4)],
    'A': [('S', 1), ('C', 3), ('D', 7)],
    'B': [('S', 4), ('E', 5)],
    'C': [('A', 3), ('F', 6)],
    'D': [('A', 7), ('G', 2)],
    'E': [('B', 5), ('F', 2)],
    'F': [('C', 6), ('E', 2), ('G', 1)],
    'G': [('D', 2), ('F', 1)]
}

start = 'S'
goal = 'G'

heuristic = {
    'S': 10,
    'A': 8,
    'B': 7,
    'C': 5,
    'D': 3,
    'E': 6,
    'F': 1,
    'G': 0
}
result = best_first_search(graph, start, goal, heuristic)

if result:
    print(f"Minimum cost path from {start} to {goal} is {result[1]}")
    print(f"Cost: {result[0]}")
else:
    print(f"No path from {start} to {goal}")

# Minimum cost path from A to G is ['A', 'C', 'F', 'G']
# Cost: 44